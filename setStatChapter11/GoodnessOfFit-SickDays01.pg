## DESCRIPTION
##   Chi-Squared Goodness-of-Fit
## ENDDESCRIPTION

## DBsubject('Statistics')
## DBchapter('Hypothesis tests')
## DBsection('Chi-squared test for goodness of fit')
## Date('4/7/2019')
## Author('Michael J. Dancs')
## Institution('Clayton State University')
## TitleText1('')
## EditionText1('')
## AuthorText1('')
## Section1('')
## Problem1('')

## DBsubject(Statistics)
## DBchapter(Hypothesis tests)
## DBsection(Chi-squared test for goodness of fit)
##KEYWORDS('GOAT')

DOCUMENT();        # This should be the first executable line in the problem.

loadMacros(
"PGstandard.pl",
"PGchoicemacros.pl",
"PGnumericalmacros.pl",
"PGstatisticsmacros.pl",
"PGML.pl",
"scaffold.pl"
);

TEXT(beginproblem());
$showPartialCorrectAnswers = 1;

Context('Numeric');
Context()->flags->set(tolType=>'absolute',tolerance=>.00051);


# Number of Categories and Expected Proportions
$k = 7;
$pmw = .1; #Tue, Wed, Thr
$pmf = random(.12,.17,.1); #Mon, Fri
$pss = .35 - $pmf; #Sat, Sun

@eprops = ($pss, $pmf, $pmw, $pmw, $pmw, $pmf, $pss);
foreach my $i (0..$k-1) {
  $epercs[$i] = 100* $eprops[$i];
  }

# Sample Size
$n = $k*random(21,99);

# Number of Observations in each Category
$count = 0;
for (my $i=0; $i<$k-1; $i++) {
  $obs[$i] = int($n*($eprops[$i]+random(-0.06, 0.06, 0.001)));
  if($obs[$i]<5) {$obs[$i]=5}
  $count = $count + $obs[$i];
  }
# Last category
if ($n -$count > 5) {
  $obs[$k-1] = $n - $count;
  } else {
  $obs[$k-1] += random(5,9);
  }
$n = $count + $obs[$k-1];

#####################################
## Adjust observations here if needed
#####################################

# Expected Counts and Test Statistic (Chi-Squared)
$stat = 0;
@ecounts = ();
@ecounts_ans = ();
for (my $i=0; $i<$k; $i++) {
  $this_e = $n*$eprops[$i];
  $stat = $stat + (($obs[$i] - $this_e)**2)/$this_e;
  push(@ecounts,$this_e);
  push(@ecounts_ans,ans_rule(5));
  }

# Significance Level
$alpha = .05;
$alphap = 100*$alpha;

# Critical value and P-Value for Goodness-of-Fit
$crit = chisqrdistr($k-1,$alpha);
$pval = chisqrprob($k-1,$stat);

# Final Conclusions...
$mc = new_multiple_choice();
@ans = ('We may conclude (at the '.$alphap.'% significance level) that employee sick days do not follow the suggested distribution.',
	'We fail to conclude (at the '.$alphap.'% significance level) that employee sick days do not follow the suggested distribution.');
@ans_wrong = (
  'We may conclude (at the '.$alphap.'% significance level) that employee sick days do follow the suggested distribution.'
);

if ($stat > $crit) { $tag = 0; } else { $tag = 1; }

$mc -> qa('Based on the above results:', $ans[$tag]);
$mc -> extra($ans[1-$tag], @ans_wrong);

BEGIN_PGML
If a company is open all seven days, are employees more likely to call in sick on or near the weekends? If so, we might expect the Day of the Week for sick days to follow a distribution such as:
END_PGML
BEGIN_TEXT
$PAR
\{begintable(6)\}
\{row('Sick Day','Sun','Mon','Tue','Wed','Thu','Fri','Sat')\}
\{row('Expected Percent', @epercs)\}
\{endtable()\}$BR
END_TEXT
BEGIN_PGML
We test this assumption using a Goodness-of-Fit test at the [@ $alpha*100 @]% significance level.

END_PGML

Scaffold::Begin();

Section::Begin();
BEGIN_PGML
Assuming a sample of size [$n], find the expected counts:
END_PGML
BEGIN_TEXT
$PAR
\{begintable(7)\}
\{row('Sick Day','Sun','Mon','Tue','Wed','Thu','Fri','Sat')\}
\{row('Expected Percent', @epercs)\}
\{row('Expected Count', @ecounts_ans)\}
\{endtable()\}$BR
END_TEXT

foreach my $i (0..$k-1) {
  ANS(Real("$ecounts[$i]")->cmp);
  }
Section::End();

Section::Begin();
BEGIN_TEXT
Here are the Expected Counts (from above) and the Observed Counts in a simple random sample of size $n:$BR
$PAR
\{begintable(6)\}
\{row('Result',(1..$k))\}
\{row('Observed Count', @obs)\}
\{row('Expected Count', @ecounts)\}
\{endtable()\}$BR
END_TEXT
BEGIN_PGML
Using the above data, the value of the test statistic is [`\chi^2`] = [_______]{$stat}.

The degrees of freedom for this test statistic is [_______]{$k-1}.
END_PGML
Section::End();

Section::Begin();
BEGIN_PGML
The P-Value for this sample is [_______]{$pval} (do not convert to percent).
END_PGML
Section::End();

Section::Begin();
BEGIN_PGML
[@ $mc->print_q() @]*
[@ $mc->print_a() @]*

END_PGML

ANS(radio_cmp($mc->correct_ans));
Section::End();
Scaffold::End();

ENDDOCUMENT();       # This should be the last executable line in the problem.

